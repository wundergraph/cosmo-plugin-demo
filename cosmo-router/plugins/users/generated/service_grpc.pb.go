// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: generated/service.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsersService_LookupUserById_FullMethodName      = "/service.UsersService/LookupUserById"
	UsersService_MutationCreatePost_FullMethodName  = "/service.UsersService/MutationCreatePost"
	UsersService_MutationUpdateUser_FullMethodName  = "/service.UsersService/MutationUpdateUser"
	UsersService_MutationUpdateUsers_FullMethodName = "/service.UsersService/MutationUpdateUsers"
	UsersService_QueryExternalUser_FullMethodName   = "/service.UsersService/QueryExternalUser"
	UsersService_QueryExternalUsers_FullMethodName  = "/service.UsersService/QueryExternalUsers"
	UsersService_QueryUser_FullMethodName           = "/service.UsersService/QueryUser"
	UsersService_QueryUserActivity_FullMethodName   = "/service.UsersService/QueryUserActivity"
	UsersService_QueryUsers_FullMethodName          = "/service.UsersService/QueryUsers"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for UsersService
type UsersServiceClient interface {
	// Lookup User entity by id
	LookupUserById(ctx context.Context, in *LookupUserByIdRequest, opts ...grpc.CallOption) (*LookupUserByIdResponse, error)
	// Creates a new post
	MutationCreatePost(ctx context.Context, in *MutationCreatePostRequest, opts ...grpc.CallOption) (*MutationCreatePostResponse, error)
	// Updates a single user's information
	MutationUpdateUser(ctx context.Context, in *MutationUpdateUserRequest, opts ...grpc.CallOption) (*MutationUpdateUserResponse, error)
	// Updates multiple users' information in a single operation
	MutationUpdateUsers(ctx context.Context, in *MutationUpdateUsersRequest, opts ...grpc.CallOption) (*MutationUpdateUsersResponse, error)
	// Returns a single external user by ID
	QueryExternalUser(ctx context.Context, in *QueryExternalUserRequest, opts ...grpc.CallOption) (*QueryExternalUserResponse, error)
	// Returns a list of all external users
	QueryExternalUsers(ctx context.Context, in *QueryExternalUsersRequest, opts ...grpc.CallOption) (*QueryExternalUsersResponse, error)
	// Returns a single internal user by ID
	QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error)
	// Returns recent activity items for a user
	QueryUserActivity(ctx context.Context, in *QueryUserActivityRequest, opts ...grpc.CallOption) (*QueryUserActivityResponse, error)
	// Returns a list of all internal users
	QueryUsers(ctx context.Context, in *QueryUsersRequest, opts ...grpc.CallOption) (*QueryUsersResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) LookupUserById(ctx context.Context, in *LookupUserByIdRequest, opts ...grpc.CallOption) (*LookupUserByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupUserByIdResponse)
	err := c.cc.Invoke(ctx, UsersService_LookupUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) MutationCreatePost(ctx context.Context, in *MutationCreatePostRequest, opts ...grpc.CallOption) (*MutationCreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationCreatePostResponse)
	err := c.cc.Invoke(ctx, UsersService_MutationCreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) MutationUpdateUser(ctx context.Context, in *MutationUpdateUserRequest, opts ...grpc.CallOption) (*MutationUpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationUpdateUserResponse)
	err := c.cc.Invoke(ctx, UsersService_MutationUpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) MutationUpdateUsers(ctx context.Context, in *MutationUpdateUsersRequest, opts ...grpc.CallOption) (*MutationUpdateUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationUpdateUsersResponse)
	err := c.cc.Invoke(ctx, UsersService_MutationUpdateUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) QueryExternalUser(ctx context.Context, in *QueryExternalUserRequest, opts ...grpc.CallOption) (*QueryExternalUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExternalUserResponse)
	err := c.cc.Invoke(ctx, UsersService_QueryExternalUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) QueryExternalUsers(ctx context.Context, in *QueryExternalUsersRequest, opts ...grpc.CallOption) (*QueryExternalUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExternalUsersResponse)
	err := c.cc.Invoke(ctx, UsersService_QueryExternalUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) QueryUser(ctx context.Context, in *QueryUserRequest, opts ...grpc.CallOption) (*QueryUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserResponse)
	err := c.cc.Invoke(ctx, UsersService_QueryUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) QueryUserActivity(ctx context.Context, in *QueryUserActivityRequest, opts ...grpc.CallOption) (*QueryUserActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserActivityResponse)
	err := c.cc.Invoke(ctx, UsersService_QueryUserActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) QueryUsers(ctx context.Context, in *QueryUsersRequest, opts ...grpc.CallOption) (*QueryUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUsersResponse)
	err := c.cc.Invoke(ctx, UsersService_QueryUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility.
//
// Service definition for UsersService
type UsersServiceServer interface {
	// Lookup User entity by id
	LookupUserById(context.Context, *LookupUserByIdRequest) (*LookupUserByIdResponse, error)
	// Creates a new post
	MutationCreatePost(context.Context, *MutationCreatePostRequest) (*MutationCreatePostResponse, error)
	// Updates a single user's information
	MutationUpdateUser(context.Context, *MutationUpdateUserRequest) (*MutationUpdateUserResponse, error)
	// Updates multiple users' information in a single operation
	MutationUpdateUsers(context.Context, *MutationUpdateUsersRequest) (*MutationUpdateUsersResponse, error)
	// Returns a single external user by ID
	QueryExternalUser(context.Context, *QueryExternalUserRequest) (*QueryExternalUserResponse, error)
	// Returns a list of all external users
	QueryExternalUsers(context.Context, *QueryExternalUsersRequest) (*QueryExternalUsersResponse, error)
	// Returns a single internal user by ID
	QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error)
	// Returns recent activity items for a user
	QueryUserActivity(context.Context, *QueryUserActivityRequest) (*QueryUserActivityResponse, error)
	// Returns a list of all internal users
	QueryUsers(context.Context, *QueryUsersRequest) (*QueryUsersResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServiceServer struct{}

func (UnimplementedUsersServiceServer) LookupUserById(context.Context, *LookupUserByIdRequest) (*LookupUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupUserById not implemented")
}
func (UnimplementedUsersServiceServer) MutationCreatePost(context.Context, *MutationCreatePostRequest) (*MutationCreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationCreatePost not implemented")
}
func (UnimplementedUsersServiceServer) MutationUpdateUser(context.Context, *MutationUpdateUserRequest) (*MutationUpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationUpdateUser not implemented")
}
func (UnimplementedUsersServiceServer) MutationUpdateUsers(context.Context, *MutationUpdateUsersRequest) (*MutationUpdateUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationUpdateUsers not implemented")
}
func (UnimplementedUsersServiceServer) QueryExternalUser(context.Context, *QueryExternalUserRequest) (*QueryExternalUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExternalUser not implemented")
}
func (UnimplementedUsersServiceServer) QueryExternalUsers(context.Context, *QueryExternalUsersRequest) (*QueryExternalUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExternalUsers not implemented")
}
func (UnimplementedUsersServiceServer) QueryUser(context.Context, *QueryUserRequest) (*QueryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (UnimplementedUsersServiceServer) QueryUserActivity(context.Context, *QueryUserActivityRequest) (*QueryUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserActivity not implemented")
}
func (UnimplementedUsersServiceServer) QueryUsers(context.Context, *QueryUsersRequest) (*QueryUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsers not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}
func (UnimplementedUsersServiceServer) testEmbeddedByValue()                      {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_LookupUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).LookupUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_LookupUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).LookupUserById(ctx, req.(*LookupUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_MutationCreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationCreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).MutationCreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_MutationCreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).MutationCreatePost(ctx, req.(*MutationCreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_MutationUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).MutationUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_MutationUpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).MutationUpdateUser(ctx, req.(*MutationUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_MutationUpdateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationUpdateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).MutationUpdateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_MutationUpdateUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).MutationUpdateUsers(ctx, req.(*MutationUpdateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_QueryExternalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExternalUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).QueryExternalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_QueryExternalUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).QueryExternalUser(ctx, req.(*QueryExternalUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_QueryExternalUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExternalUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).QueryExternalUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_QueryExternalUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).QueryExternalUsers(ctx, req.(*QueryExternalUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_QueryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).QueryUser(ctx, req.(*QueryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_QueryUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).QueryUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_QueryUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).QueryUserActivity(ctx, req.(*QueryUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_QueryUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).QueryUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_QueryUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).QueryUsers(ctx, req.(*QueryUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupUserById",
			Handler:    _UsersService_LookupUserById_Handler,
		},
		{
			MethodName: "MutationCreatePost",
			Handler:    _UsersService_MutationCreatePost_Handler,
		},
		{
			MethodName: "MutationUpdateUser",
			Handler:    _UsersService_MutationUpdateUser_Handler,
		},
		{
			MethodName: "MutationUpdateUsers",
			Handler:    _UsersService_MutationUpdateUsers_Handler,
		},
		{
			MethodName: "QueryExternalUser",
			Handler:    _UsersService_QueryExternalUser_Handler,
		},
		{
			MethodName: "QueryExternalUsers",
			Handler:    _UsersService_QueryExternalUsers_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _UsersService_QueryUser_Handler,
		},
		{
			MethodName: "QueryUserActivity",
			Handler:    _UsersService_QueryUserActivity_Handler,
		},
		{
			MethodName: "QueryUsers",
			Handler:    _UsersService_QueryUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generated/service.proto",
}
