"""
Root Query type providing access to user data
"""
type Query {
  """
  Returns a list of all internal users
  """
  users: [User!]!
  
  """
  Returns a single internal user by ID
  """
  user(id: ID!): User
  
  """
  Returns a list of all external users
  """
  externalUsers: [ExternalUser!]!
  
  """
  Returns a single external user by ID
  """
  externalUser(id: ID!): ExternalUser
  
  """
  Returns recent activity items for a user
  """
  userActivity(userId: ID!, limit: Int = 10): [ActivityItem!]!
}

"""
Root Mutation type for modifying user data
"""
type Mutation {
  """
  Updates a single user's information
  """
  updateUser(input: UserInput!): User
  
  """
  Updates multiple users' information in a single operation
  """
  updateUsers(input: [UserInput!]!): [User!]!
  
  """
  Creates a new post
  """
  createPost(input: PostInput!): Post!
}

type User implements Node @key(fields: "id") {
  """ The unique identifier for the user """
  id: ID!
  """ The user's name """
  name: String!
  """ The user's email address """
  email: String!
  """ The user's role in the system """
  role: UserRole!
  """ List of permissions granted to the user (always present, may be empty) """
  permissions: [String!]!
  """ Optional list of tags associated with the user for categorization """
  tags: [String!]
  """ Nested list: Skills organized by categories (e.g. [["JavaScript", "TypeScript"], ["React", "Vue"]]) """
  skillCategories: [[String!]!]!
  """ Union type: Recent user activities """
  recentActivity: [ActivityItem!]!
  """ Nullable complex type: User profile information """
  profile: Profile
  """ Nullable string: User biography """
  bio: String
  """ Nullable integer: User age """
  age: Int
}

"""
Interface for entities with unique identifiers
"""
interface Node {
  """ The unique identifier """
  id: ID!
}

"""
User profile information (nullable complex type)
"""
type Profile {
  """ User's display name preference """
  displayName: String
  """ User's timezone preference """
  timezone: String
  """ Theme preference """
  theme: Theme
}

"""
A simple post by a user
"""
type Post implements Node {
  """ The unique identifier for the post """
  id: ID!
  """ Post title """
  title: String!
  """ Post author ID """
  authorId: ID!
}

"""
A comment by a user
"""
type Comment implements Node {
  """ The unique identifier for the comment """
  id: ID!
  """ Comment content """
  content: String!
  """ Comment author ID """
  authorId: ID!
}

"""
Union type representing different types of user activities
"""
union ActivityItem = Post | Comment

"""
UI theme options
"""
enum Theme {
  LIGHT
  DARK
  AUTO
}

type ExternalUser {
  id: ID!
  name: String!
  email: String!
  username: String!
  phone: String
  website: String
  company: Company
  address: Address
}

type Company {
  name: String!
  catchPhrase: String
  bs: String
}

type Address {
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Geo
}

type Geo {
  lat: String
  lng: String
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

input UserInput {
  id: ID!
  name: String
  email: String
  role: UserRole
  permissions: [String!]
  tags: [String!]
  skillCategories: [[String!]!]
  bio: String
  age: Int
  profile: ProfileInput
}

"""
Input type for user profile updates
"""
input ProfileInput {
  displayName: String
  timezone: String
  theme: Theme
}

"""
Input type for creating posts
"""
input PostInput {
  title: String!
  authorId: ID!
}