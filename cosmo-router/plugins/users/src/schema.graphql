"""
Root Query type providing access to user data
"""
type Query {
  """
  Returns a list of all internal users
  """
  users: [User!]!
  
  """
  Returns a single internal user by ID
  """
  user(id: ID!): User
  
  """
  Returns a list of all external users
  """
  externalUsers: [ExternalUser!]!
  
  """
  Returns a single external user by ID
  """
  externalUser(id: ID!): ExternalUser
}

"""
Root Mutation type for modifying user data
"""
type Mutation {
  """
  Updates a single user's information
  """
  updateUser(input: UserInput!): User
  
  """
  Updates multiple users' information in a single operation
  """
  updateUsers(input: [UserInput!]!): [User!]!
}

type User @key(fields: "id") {
  """ The unique identifier for the user """
  id: ID!
  """ The user's name """
  name: String!
  """ The user's email address """
  email: String!
  """ The user's role in the system """
  role: UserRole!
  """ List of permissions granted to the user (always present, may be empty) """
  permissions: [String!]!
  """ Optional list of tags associated with the user for categorization """
  tags: [String!]
}

type ExternalUser {
  id: ID!
  name: String!
  email: String!
  username: String!
  phone: String
  website: String
  company: Company
  address: Address
}

type Company {
  name: String!
  catchPhrase: String
  bs: String
}

type Address {
  street: String
  suite: String
  city: String
  zipcode: String
  geo: Geo
}

type Geo {
  lat: String
  lng: String
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

input UserInput {
  id: ID!
  name: String
  email: String
  role: UserRole
  permissions: [String!]
  tags: [String!]
}